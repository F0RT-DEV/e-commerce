import Joi from 'joi';

// üõí Schema para adicionar item ao carrinho
export const addToCartSchema = Joi.object({
  produto_id: Joi.number().integer().positive().required().messages({
    'number.base': 'ID do produto deve ser um n√∫mero',
    'number.integer': 'ID do produto deve ser um n√∫mero inteiro',
    'number.positive': 'ID do produto deve ser positivo',
    'any.required': 'ID do produto √© obrigat√≥rio'
  }),
  quantidade: Joi.number().integer().positive().max(99).required().messages({
    'number.base': 'Quantidade deve ser um n√∫mero',
    'number.integer': 'Quantidade deve ser um n√∫mero inteiro',
    'number.positive': 'Quantidade deve ser positiva',
    'number.max': 'Quantidade m√°xima √© 99',
    'any.required': 'Quantidade √© obrigat√≥ria'
  })
});

// üîÑ Schema para atualizar quantidade
export const updateCartItemSchema = Joi.object({
  quantidade: Joi.number().integer().min(0).max(99).required().messages({
    'number.base': 'Quantidade deve ser um n√∫mero',
    'number.integer': 'Quantidade deve ser um n√∫mero inteiro',
    'number.min': 'Quantidade deve ser 0 ou maior (0 = remover)',
    'number.max': 'Quantidade m√°xima √© 99',
    'any.required': 'Quantidade √© obrigat√≥ria'
  })
});

// üí≥ Schema para finalizar compra - Formato robusto
export const checkoutSchema = Joi.object({
  // Endere√ßo de entrega detalhado
  shipping_address: Joi.object({
    cep: Joi.string().pattern(/^\d{5}-?\d{3}$/).required().messages({
      'string.pattern.base': 'CEP deve estar no formato 12345-678 ou 12345678',
      'any.required': 'CEP √© obrigat√≥rio'
    }),
    street: Joi.string().min(5).max(255).required().messages({
      'string.min': 'Rua deve ter pelo menos 5 caracteres',
      'string.max': 'Rua deve ter no m√°ximo 255 caracteres',
      'any.required': 'Rua √© obrigat√≥ria'
    }),
    number: Joi.string().max(20).required().messages({
      'string.max': 'N√∫mero deve ter no m√°ximo 20 caracteres',
      'any.required': 'N√∫mero √© obrigat√≥rio'
    }),
    complement: Joi.string().max(100).optional().allow('').messages({
      'string.max': 'Complemento deve ter no m√°ximo 100 caracteres'
    }),
    neighborhood: Joi.string().min(2).max(100).required().messages({
      'string.min': 'Bairro deve ter pelo menos 2 caracteres',
      'string.max': 'Bairro deve ter no m√°ximo 100 caracteres',
      'any.required': 'Bairro √© obrigat√≥rio'
    }),
    city: Joi.string().min(2).max(100).required().messages({
      'string.min': 'Cidade deve ter pelo menos 2 caracteres',
      'string.max': 'Cidade deve ter no m√°ximo 100 caracteres',
      'any.required': 'Cidade √© obrigat√≥ria'
    }),
    state: Joi.string().length(2).uppercase().required().messages({
      'string.length': 'Estado deve ter exatamente 2 caracteres',
      'any.required': 'Estado √© obrigat√≥rio'
    })
  }).required().messages({
    'any.required': 'Endere√ßo de entrega √© obrigat√≥rio'
  }),

  // M√©todo de pagamento
  payment_method: Joi.string().valid('credit_card', 'debit_card', 'pix', 'boleto').required().messages({
    'any.only': 'M√©todo de pagamento deve ser: credit_card, debit_card, pix ou boleto',
    'any.required': 'M√©todo de pagamento √© obrigat√≥rio'
  }),

  // Cupom de desconto (opcional)
  coupon: Joi.string().min(3).max(50).optional().messages({
    'string.min': 'Cupom deve ter pelo menos 3 caracteres',
    'string.max': 'Cupom deve ter no m√°ximo 50 caracteres'
  }),

  // Observa√ß√µes (opcional)
  observacoes: Joi.string().max(300).optional().allow('').messages({
    'string.max': 'Observa√ß√µes devem ter no m√°ximo 300 caracteres'
  })
});