import db from '../../db.js';

export class NotificationModel {

  // üì© Criar uma notifica√ß√£o
  static async create(notificationData) {
    try {
      const [id] = await db('notificacoes').insert({
        usuario_id: notificationData.usuario_id,
        titulo: notificationData.titulo,
        mensagem: notificationData.mensagem,
        lida: false,
        criado_em: new Date()
      });

      const notification = await this.findById(id);
      console.log(`üì© Notifica√ß√£o criada: ${notification.titulo} para usu√°rio ${notification.usuario_id}`);
      
      return notification;
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
      throw new Error('Erro ao criar notifica√ß√£o');
    }
  }

  // üìã Buscar notifica√ß√£o por ID
  static async findById(id) {
    try {
      const notification = await db('notificacoes')
        .select('*')
        .where({ id })
        .first();

      if (!notification) {
        throw new Error('Notifica√ß√£o n√£o encontrada');
      }

      return notification;
    } catch (error) {
      if (error.message === 'Notifica√ß√£o n√£o encontrada') {
        throw error;
      }
      console.error('‚ùå Erro ao buscar notifica√ß√£o:', error);
      throw new Error('Erro ao buscar notifica√ß√£o');
    }
  }

  // üìú Listar notifica√ß√µes do usu√°rio
  static async findByUser(userId, options = {}) {
    try {
      const {
        page = 1,
        limit = 20,
        lida = null,
        order = 'desc'
      } = options;

      const offset = (page - 1) * limit;

      let query = db('notificacoes')
        .select('*')
        .where({ usuario_id: userId });

      // Filtrar por status de leitura se especificado
      if (lida !== null) {
        query = query.where({ lida });
      }

      // Ordenar por data de cria√ß√£o
      query = query.orderBy('criado_em', order);

      // Pagina√ß√£o
      const notifications = await query.limit(limit).offset(offset);

      // Contar total para pagina√ß√£o
      let countQuery = db('notificacoes')
        .count('* as total')
        .where({ usuario_id: userId });

      if (lida !== null) {
        countQuery = countQuery.where({ lida });
      }

      const [{ total }] = await countQuery;

      // Calcular estat√≠sticas
      const stats = await this.getUserStats(userId);

      return {
        notifications,
        pagination: {
          current_page: page,
          per_page: limit,
          total: parseInt(total),
          total_pages: Math.ceil(total / limit),
          has_next: page < Math.ceil(total / limit),
          has_prev: page > 1
        },
        stats
      };
    } catch (error) {
      console.error('‚ùå Erro ao listar notifica√ß√µes:', error);
      throw new Error('Erro ao listar notifica√ß√µes');
    }
  }

  // üìä Estat√≠sticas do usu√°rio
  static async getUserStats(userId) {
    try {
      const [stats] = await db('notificacoes')
        .select(
          db.raw('COUNT(*) as total'),
          db.raw('SUM(CASE WHEN lida = 1 THEN 1 ELSE 0 END) as lidas'),
          db.raw('SUM(CASE WHEN lida = 0 THEN 1 ELSE 0 END) as nao_lidas')
        )
        .where({ usuario_id: userId });

      return {
        total: parseInt(stats.total) || 0,
        lidas: parseInt(stats.lidas) || 0,
        nao_lidas: parseInt(stats.nao_lidas) || 0
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
      throw new Error('Erro ao buscar estat√≠sticas');
    }
  }

  // ‚úÖ Marcar notifica√ß√£o como lida
  static async markAsRead(id, userId) {
    try {
      // Verificar se a notifica√ß√£o existe e pertence ao usu√°rio
      const notification = await db('notificacoes')
        .select('*')
        .where({ id, usuario_id: userId })
        .first();

      if (!notification) {
        throw new Error('Notifica√ß√£o n√£o encontrada');
      }

      if (notification.lida) {
        throw new Error('Notifica√ß√£o j√° foi lida');
      }

      // Marcar como lida
      await db('notificacoes')
        .where({ id, usuario_id: userId })
        .update({ lida: true });

      console.log(`‚úÖ Notifica√ß√£o ${id} marcada como lida para usu√°rio ${userId}`);

      return await this.findById(id);
    } catch (error) {
      if (error.message === 'Notifica√ß√£o n√£o encontrada' || error.message === 'Notifica√ß√£o j√° foi lida') {
        throw error;
      }
      console.error('‚ùå Erro ao marcar notifica√ß√£o como lida:', error);
      throw new Error('Erro ao marcar notifica√ß√£o como lida');
    }
  }

  // ‚úÖ Marcar todas as notifica√ß√µes como lidas
  static async markAllAsRead(userId) {
    try {
      const updated = await db('notificacoes')
        .where({ usuario_id: userId, lida: false })
        .update({ lida: true });

      console.log(`‚úÖ ${updated} notifica√ß√µes marcadas como lidas para usu√°rio ${userId}`);

      return { count: updated };
    } catch (error) {
      console.error('‚ùå Erro ao marcar todas como lidas:', error);
      throw new Error('Erro ao marcar todas as notifica√ß√µes como lidas');
    }
  }

  // üóëÔ∏è Deletar notifica√ß√£o
  static async delete(id, userId = null) {
    try {
      const query = db('notificacoes').where({ id });
      
      // Se userId fornecido, verificar propriedade
      if (userId) {
        query.andWhere({ usuario_id: userId });
      }

      const notification = await query.clone().first();

      if (!notification) {
        throw new Error('Notifica√ß√£o n√£o encontrada');
      }

      await query.del();

      console.log(`üóëÔ∏è Notifica√ß√£o ${id} deletada${userId ? ` para usu√°rio ${userId}` : ' (admin)'}`);

      return { message: 'Notifica√ß√£o deletada com sucesso' };
    } catch (error) {
      if (error.message === 'Notifica√ß√£o n√£o encontrada') {
        throw error;
      }
      console.error('‚ùå Erro ao deletar notifica√ß√£o:', error);
      throw new Error('Erro ao deletar notifica√ß√£o');
    }
  }

  // üìù Atualizar notifica√ß√£o (admin)
  static async update(id, updateData) {
    try {
      const notification = await this.findById(id);
      
      if (!notification) {
        throw new Error('Notifica√ß√£o n√£o encontrada');
      }

      await db('notificacoes')
        .where({ id })
        .update({
          ...updateData,
          atualizado_em: new Date()
        });

      console.log(`üìù Notifica√ß√£o ${id} atualizada`);

      return await this.findById(id);
    } catch (error) {
      if (error.message === 'Notifica√ß√£o n√£o encontrada') {
        throw error;
      }
      console.error('‚ùå Erro ao atualizar notifica√ß√£o:', error);
      throw new Error('Erro ao atualizar notifica√ß√£o');
    }
  }

  // ÔøΩ Listar todas as notifica√ß√µes (admin)
  static async findAll(options = {}) {
    try {
      const { page = 1, limit = 20, lida, order = 'desc' } = options;
      const offset = (page - 1) * limit;

      let query = db('notificacoes')
        .select(
          'notificacoes.*',
          'usuarios.nome as usuario_nome',
          'usuarios.email as usuario_email'
        )
        .leftJoin('usuarios', 'notificacoes.usuario_id', 'usuarios.id');

      // Filtrar por status de leitura
      if (typeof lida === 'boolean') {
        query.where('notificacoes.lida', lida);
      }

      // Ordena√ß√£o
      query.orderBy('notificacoes.criado_em', order);

      // Buscar notifica√ß√µes
      const notifications = await query
        .limit(limit)
        .offset(offset);

      // Contar total
      const totalQuery = db('notificacoes');
      if (typeof lida === 'boolean') {
        totalQuery.where('lida', lida);
      }
      const [{ total }] = await totalQuery.count('id as total');

      // Estat√≠sticas
      const stats = await this.getGlobalStats();

      return {
        notifications,
        pagination: {
          current_page: page,
          per_page: limit,
          total: parseInt(total),
          total_pages: Math.ceil(total / limit),
          has_next: page * limit < total,
          has_prev: page > 1
        },
        stats
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar todas as notifica√ß√µes:', error);
      throw new Error('Erro ao buscar notifica√ß√µes');
    }
  }

  // üìä Estat√≠sticas globais (admin)
  static async getGlobalStats() {
    try {
      // Contadores gerais
      const [totalResult] = await db('notificacoes').count('id as total');
      const [lidasResult] = await db('notificacoes').where('lida', true).count('id as total');
      const [naoLidasResult] = await db('notificacoes').where('lida', false).count('id as total');

      // Estat√≠sticas por tipo
      const tipoStats = await db('notificacoes')
        .select('tipo')
        .count('id as total')
        .groupBy('tipo');

      // Usu√°rios com mais notifica√ß√µes
      const topUsers = await db('notificacoes')
        .select(
          'usuarios.nome',
          'usuarios.email'
        )
        .count('notificacoes.id as total_notificacoes')
        .leftJoin('usuarios', 'notificacoes.usuario_id', 'usuarios.id')
        .groupBy('notificacoes.usuario_id', 'usuarios.nome', 'usuarios.email')
        .orderBy('total_notificacoes', 'desc')
        .limit(5);

      return {
        total: parseInt(totalResult.total),
        lidas: parseInt(lidasResult.total),
        nao_lidas: parseInt(naoLidasResult.total),
        por_tipo: tipoStats,
        usuarios_mais_ativos: topUsers
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas globais:', error);
      throw new Error('Erro ao obter estat√≠sticas');
    }
  }

  // üì® Fun√ß√µes espec√≠ficas para cria√ß√£o de notifica√ß√µes de pedido

  // üÜï Criar notifica√ß√£o de novo pedido
  static async createOrderNotification(userId, pedidoId, total) {
    const titulo = 'Pedido Confirmado! üéâ';
    const mensagem = `Seu pedido #${pedidoId} foi confirmado com sucesso! Total: R$ ${total.toFixed(2)}. Voc√™ receber√° atualiza√ß√µes sobre o status do seu pedido.`;
    
    return await this.create({
      usuario_id: userId,
      titulo,
      mensagem
    });
  }

  // üì¶ Criar notifica√ß√£o de mudan√ßa de status
  static async createStatusChangeNotification(userId, pedidoId, statusAntigo, statusNovo) {
    const statusMessages = {
      'pendente': '‚è≥ Aguardando processamento',
      'confirmado': '‚úÖ Confirmado e sendo preparado',
      'preparando': 'üì¶ Sendo preparado para envio',
      'enviado': 'üöõ Enviado para entrega',
      'entregue': '‚úÖ Entregue com sucesso',
      'cancelado': '‚ùå Cancelado'
    };

    const titulo = `Status do Pedido Atualizado`;
    const mensagem = `Seu pedido #${pedidoId} teve o status alterado de "${statusMessages[statusAntigo] || statusAntigo}" para "${statusMessages[statusNovo] || statusNovo}".`;
    
    return await this.create({
      usuario_id: userId,
      titulo,
      mensagem
    });
  }

  // üéüÔ∏è Criar notifica√ß√£o de cupom usado
  static async createCouponUsedNotification(userId, cupomCodigo, desconto) {
    const titulo = 'üéüÔ∏è Cupom Aplicado!';
    const mensagem = `Cupom "${cupomCodigo}" aplicado com sucesso! Voc√™ economizou R$ ${desconto.toFixed(2)} na sua compra.`;
    
    return await this.create({
      usuario_id: userId,
      titulo,
      mensagem
    });
  }
}
